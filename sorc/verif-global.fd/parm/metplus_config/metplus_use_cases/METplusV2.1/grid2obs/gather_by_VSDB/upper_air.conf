[dir]
# Input and output data directories
STAT_ANALYSIS_LOOKIN_DIR =  {OUTPUT_BASE}/grid2obs_step1/metplus_output/make_met_data_by_{ENV[make_met_data_by]}/point_stat/upper_air/{MODEL}
STAT_ANALYSIS_OUTPUT_DIR = {OUTPUT_BASE}/grid2obs_step1/metplus_output/gather_by_{ENV[gather_by]}/stat_analysis/upper_air/{MODEL}
# Location of configuration files used by MET applications
CONFIG_DIR = {ENV[PARMverif_global]}/metplus_config/metplus_use_cases/METplusV{ENV[METplus_version]}/grid2obs/met_config/metV{ENV[MET_version]}
# Log and temporary directories
LOG_DIR = {OUTPUT_BASE}/grid2obs_step1/metplus_output/logs/{MODEL}
TMP_DIR = /tmp

[config]
LOG_METPLUS = {LOG_DIR}/master_metplus_grid2obs_step1_upper_air_gatherby{ENV[gather_by]}_for{ENV[DATE]}_runon{CLOCK_TIME}.log
METPLUS_CONF = {OUTPUT_BASE}/grid2obs_step1/metplus_output/confs/{MODEL}/master_metplus_grid2obs_step1_upper_air_gatherby{ENV[gather_by]}_for{ENV[DATE]}_runon{CLOCK_TIME}.conf

LOOP_BY = VALID
#Format of VALID_BEG and VALID_END
VALID_TIME_FMT = %Y%m%d
# Start time for METplus run
VALID_BEG = {ENV[DATE]}
# End time for METplus run
VALID_END = {ENV[DATE]}
# Increment between METplus runs in seconds. Must be > 60
VALID_INCREMENT = 86400
# Further specifications for valid and init hours
# must be set, regardlesss of LOOP_BY agrument
# ""_HOUR(BEG)(END) = HHMM, two digit hour two digit minute
# ""_HOUR_INCREMENT = numeric value in seconds, must be >= 60
# ""_HOUR_METHOD = "GROUP" or "LOOP"
#    GROUP = look at times as a group
#    LOOP  = loop over individial times
# Filter by valid hour(s)
VALID_HOUR_METHOD = GROUP
VALID_HOUR_BEG = {ENV[valid_hr_beg]}00
VALID_HOUR_END = {ENV[valid_hr_end]}00
VALID_HOUR_INCREMENT = {ENV[valid_hr_inc]}
# Filter by initialization
INIT_HOUR_METHOD = LOOP
INIT_HOUR_BEG = {ENV[init_hr_beg]}00
INIT_HOUR_END = {ENV[init_hr_end]}00
INIT_HOUR_INCREMENT = {ENV[init_hr_inc]}

# Options are times, processes
# times = run all items in the PROCESS_LIST for a single initialization
# time, then repeat until all times have been evaluated.
# processes = run each item in the PROCESS_LIST for all times
# specified, then repeat for the next item in the PROCESS_LIST.
LOOP_ORDER = times
# List of applications to run
PROCESS_LIST = StatAnalysis

MODEL = {ENV[model]}
OBTYPE = {ENV[obtype]}

STAT_ANALYSIS_CONFIG = {CONFIG_DIR}/STATAnalysisConfig

# stat_analysis job info
JOB_NAME = filter
# if using -dump_row, put in JOBS_ARGS "-dump_row [dump_row_filename]"
# if using -out_stat, put in JOBS_ARGS "-out_stat [out_stat_filename]"
# METplus will fill in filename
JOB_ARGS = -dump_row [dump_row_filename]

# Optional variables for further filtering
# if more than one use comma separated list
#DESC = 
#FCST_LEAD =
#FCST_VAR_NAME =
#FCST_VAR_LEVEL =
#OBS_VAR_NAME =
#OBS_VAR_LEVEL =
#REGION =
#INTERP =
#INTERP_PTS =
#FCST_THRESH =
#COV_THRESH =
#LINE_TYPE =

[filename_templates]
# Optional settings to create templated directory and file name information 
# to save files as stat_analysis out as, this is appended to STAT_ANALYSIS_OUTPUT_DIR
# if no template is provided a default filename set in the code will be used
# this can be tricky to set up but can be very useful
# for example, it doesn't make sense to use {init?fmt=%Y%m%d} if 
# LOOP_BY = VALID, but if INIT_HOUR_METHOD = LOOP
# {init?fmt=%H} makes sense!
# aceepted key options: valid, init 
# if wanting to include information when (VALID)(INIT)_HOUR_METHOD = GROUP
# put this information directly in the template, ex. {INIT_HOUR_END}
# additional conf items can be specided in the template as well
STAT_ANALYSIS_DUMP_ROW_TMPL = {MODEL}_{ENV[DATE]}{ENV[valid_hr_beg]}_{ENV[DATE]}{ENV[valid_hr_end]}_{init?fmt=%H}.stat
STAT_ANALYSIS_OUT_STAT_TMPL =
