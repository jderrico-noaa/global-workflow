# disable in source builds to protect against overwriting other Makefiles
#set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
if( NOT DEFINED ENV{CC} )
  find_path( crayComp "ftn" )
  find_path( wcossIntel "mpfort" )
  find_path( intelComp "ifort" )
  find_path( pgiComp "pgf90" )
  if( crayComp )
    message("Setting CrayLinuxEnvironment")
    set(CMAKE_SYSTEM_NAME "CrayLinuxEnvironment")
    set(CMAKE_C_COMPILER "${crayComp}/cc")
    set(CMAKE_CXX_COMPILER "${crayComp}/CC")
    set(CMAKE_Fortran_COMPILER "${crayComp}/ftn")
  endif()
  if( intelComp )
    set(ENV{CC} "icc")
    set(ENV{CXX} "icpc")
    set(ENV{FC} "ifort")
  endif()
  if( wcossIntel )
    message("Setting env for wcoss intel")
    set(ENV{CC} "mpcc")
    set(ENV{CXX} "mpCC")
    set(ENV{FC} "mpfort")
  endif()
  if( pgiComp )
    set(ENV{CC} "pgcc")
    set(ENV{CXX} "pgCC")
    set(ENV{FC} "pgf90")
  endif()
endif()

project(CHGRES)
  enable_language (Fortran)

  option(BUILD_FV3GFS_NCIO "Build the FV3GFS_NCIO library" ON)
  cmake_minimum_required(VERSION 2.8)
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
  SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
  SET(ARCHIVE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_INCLUDE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/include")
  set(CMAKE_INCLUDE_4_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/include4")
  set(Fortran_MODULE_DIRECTORY "${PROJECT_BINARY_DIR}/include")
  set(CMAKE_Fortran_MODULE_DIRECTORY "${PROJECT_BINARY_DIR}/include")
  file(MAKE_DIRECTORY ${CMAKE_INCLUDE_OUTPUT_DIRECTORY})
  file(MAKE_DIRECTORY ${CMAKE_INCLUDE_4_OUTPUT_DIRECTORY})
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/setPlatformVariables.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/setIntelFlags.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/setGNUFlags.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/setPGIFlags.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/setHOST.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/Cheyenne.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/Discover.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/Generic.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/Gaea.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/Jet.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/S4.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/Hera.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/Orion.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/WCOSS-C.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/WCOSS-D.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/platforms/WCOSS.cmake)

  cmake_policy(SET CMP0009 NEW)
  find_package(OpenMP)
  message("found openmp with flag ${OPENMP_Fortran_FLAGS}")

# Set Host specific flags and options
  setHOST()

  if(FIND_HDF5_HL)
    find_package(HDF5 COMPONENTS C HL)
  elseif(FIND_HDF5)
    find_package(HDF5)
  endif()

  MESSAGE(${CMAKE_CURRENT_SOURCE_DIR})
  # make sure that the default is a RELEASE
  if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE RELEASE CACHE STRING
        "Choose the type of build, options are: PRODUCTION Debug Release."
        FORCE)
  endif (NOT CMAKE_BUILD_TYPE)
  
  STRING(COMPARE EQUAL ${CMAKE_BUILD_TYPE} "RelWithDebInfo" BUILD_RELEASE)
  STRING(COMPARE EQUAL ${CMAKE_BUILD_TYPE} "PRODUCTION" BUILD_PRODUCTION)
  STRING(COMPARE EQUAL ${CMAKE_BUILD_TYPE} "PROFILE" BUILD_PROFILE)
  set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/exec )

  set(CMAKE_Fortran_FLAGS_RELEASE "")  
  if (CMAKE_CXX_COMPILER_ID MATCHES "GNU*")
    message("Setting GNU flags")
    setGNU()
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
    message("Setting Intel flags")
    setIntel()
  elseif(CMAKE_C_COMPILER MATCHES "pgc*")
    message("Setting PGI flags")
    setPGI()
  endif()


  find_package(MPI REQUIRED)
  message("MPI version is ${MPI_Fortran_VERSION}")
  message("MPI f90 version is ${MPI_Fortran_HAVE_F90_MODULE}")
  message("MPI f08 version is ${MPI_Fortran_HAVE_F08_MODULE}")

  add_definitions(${MPI_Fortran_COMPILE_FLAGS})
  include_directories(${MPI_Fortran_INCLUDE_DIRS} ${MPI_INCLUDE_PATH} "./" ${CMAKE_INCLUDE_OUTPUT_DIRECTORY})
  link_directories(${MPI_Fortran_LIBRARIES} ${ARCHIVE_OUTPUT_PATH} )
    find_package( NetCDF REQUIRED)
    if(NETCDF4)
      if(CMAKE_MAJOR_VERSION GREATER 2)
        find_package( ZLIB )
      endif()
      find_package( CURL )
    endif()

  # default installation
  get_filename_component (default_prefix ".." ABSOLUTE)
# set (CMAKE_INSTALL_PREFIX ${default_prefix} CACHE STRING "set prefix"
#       FORCE)


  # FFLAGS depend on the compiler
  get_filename_component (Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)
  set(CFLAGS "-I. -DFortranByte=char -DFortranInt=int -DFortranLlong='long long' -O3  -Dfunder")
  set (CMAKE_Fortran_INC_FLAGS "-I ./ -I ${CORE_INCS} -I ${NETCDF_INCLUDES} ")
  set (CFLAGS_N "-I. -DFortranByte=char -DFortranInt=int -DFortranLlong='long long'  -O3  -Dfunder")


  find_package( BACIO )
  find_package( SP )
  find_package( W3NCO )
  find_package( IP )

  if(BUILD_FV3GFS_NCIO)
    set(FV3GFS_NCIO_INCS "${PROJECT_BINARY_DIR}/src/fv3gfs_ncio/include")
    add_subdirectory(fv3gfs_ncio)
    set(FV3GFS_NCIO_LIBRARIES fv3gfs_ncio )
  endif(BUILD_FV3GFS_NCIO)
  add_subdirectory(src)
